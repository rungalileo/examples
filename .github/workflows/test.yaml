name: test

on:
  workflow_dispatch:
  schedule:
    # At 08:00 UTC on every day-of-week from Monday through Friday.
    - cron: "0 8 * * 1-5"
  push:
    branches:
      - main
  pull_request:
    types: [opened, synchronize]

env:
  MINIMIZE_FOR_CI: "true"
  GALILEO_USERNAME: ${{ secrets.GALILEO_USERNAME }}
  GALILEO_PASSWORD: ${{ secrets.GALILEO_PASSWORD }}
  GALILEO_CONSOLE_URL_ENTERPRISE: ${{ secrets.GALILEO_CONSOLE_URL_ENTERPRISE }}
  GALILEO_USERNAME_ENTERPRISE: ${{ secrets.GALILEO_USERNAME_ENTERPRISE }}
  GALILEO_PASSWORD_ENTERPRISE: ${{ secrets.GALILEO_PASSWORD_ENTERPRISE }}

jobs:
  markdown-link-check:
    if: ${{ false }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@master
      - uses: gaurav-nelson/github-action-markdown-link-check@v1

  paths-filter:
    # https://stackoverflow.com/questions/70708306/github-actions-run-step-job-in-a-workflow-if-changes-happen-in-specific-folde?rq=1
    runs-on: ubuntu-latest
    outputs:
      mltc-pytorch: ${{ steps.filter.outputs.mltc-pytorch }}
      mltc-tensorflow: ${{ steps.filter.outputs.mltc-tensorflow }}
      ner-hf-trainer: ${{ steps.filter.outputs.ner-hf-trainer }}
      ner-pytorch: ${{ steps.filter.outputs.ner-pytorch }}
      ner-spacy: ${{ steps.filter.outputs.ner-spacy }}
      ner-spacy-inf: ${{ steps.filter.outputs.ner-spacy-inf }}
      ner-tensorflow: ${{ steps.filter.outputs.ner-tensorflow }}
      nli-pytorch: ${{ steps.filter.outputs.nli-pytorch }}
      nli-tensorflow: ${{ steps.filter.outputs.nli-tensorflow }}
      tc-hf-trainer: ${{ steps.filter.outputs.tc-hf-trainer }}
      tc-keras: ${{ steps.filter.outputs.tc-keras }}
      tc-pytorch: ${{ steps.filter.outputs.tc-pytorch }}
      tc-tensorflow: ${{ steps.filter.outputs.tc-tensorflow }}
      ic-pytorch: ${{ steps.filter.outputs.ic-pytorch }}
      od-ultralytics: ${{ steps.filter.outputs.od-ultralytics }}
      tc-setfit-transformers: ${{ steps.filter.outputs.tc-setfit-transformers }}
      semantic-segmentation-pytorch: ${{ steps.filter.outputs.semantic-segmentation-pytorch }}
    steps:
      - uses: actions/checkout@v3
      - uses: dorny/paths-filter@v2
        id: filter
        with:
          filters: |
            mltc-pytorch:
              - 'examples/multi_label_text_classification/Multi_Label_Text_Classification_using_Pytorch_and_ðŸ”­_Galileo.ipynb'
            mltc-tensorflow:
              - 'examples/multi_label_text_classification/Multi_Label_Text_Classification_using_TensorFlow_and_ðŸ”­_Galileo.ipynb'
            ner-hf-trainer:
              - 'examples/named_entity_recognition/Named_Entity_Recognition_with_Huggingface_Trainer_and_ðŸ”­_Galileo.ipynb'
            ner-pytorch:
              - 'examples/named_entity_recognition/Named_Entity_Recognition_with_Pytorch_and_ðŸ”­_Galileo.ipynb'
            ner-spacy:
              - 'examples/named_entity_recognition/Named_Entity_Recognition_with_SpaCy_and_ðŸ”­_Galileo.ipynb'
            ner-spacy-inf:
              - 'examples/named_entity_recognition/Named_Entity_Recognition_Inference_with_SpaCy_and_ðŸ”­_Galileo.ipynb'
            ner-tensorflow:
              - 'examples/named_entity_recognition/Named_Entity_Recognition_with_Tensorflow_and_ðŸ”­_Galileo.ipynb'
            nli-pytorch:
              - 'examples/natural_language_inference/Natural_Language_Inference_using_Pytorch_and_ðŸ”­_Galileo.ipynb'
            nli-tensorflow:
              - 'examples/natural_language_inference/Natural_Language_Inference_using_TensorFlow_and_ðŸ”­_Galileo.ipynb'
            tc-hf-trainer:
              - 'examples/text_classification/Text_Classification_using_Huggingface_Trainer_and_ðŸ”­_Galileo.ipynb'
            tc-keras:
              - 'examples/text_classification/Text_Classification_using_Keras_and_ðŸ”­_Galileo.ipynb'
            tc-pytorch:
              - 'examples/text_classification/Text_Classification_using_PyTorch_and_ðŸ”­_Galileo.ipynb'
            tc-tensorflow:
              - 'examples/text_classification/Text_Classification_using_Tensorflow_and_ðŸ”­_Galileo.ipynb'
            tc-setfit-transformers:
              - 'examples/text_classification/Text_Classification_using_SetFit_and_ðŸ”­_Galileo.ipynb'
            ic-pytorch:
              - 'examples/image_classification/Image_Classification_using_PyTorch_and_ðŸ”­_Galileo.ipynb'
            od-ultralytics:
              - 'examples/object_detection/Object_Detection_using_Ultralytics_and_ðŸ”­_Galileo.ipynb'
            semantic-segmentation-pytorch:
              - 'examples/semantic_segmentation/Semantic_Segmentation_Using_ðŸ”­_Galileo.ipynb'

  mltc-pytorch:
    runs-on: ubuntu-latest
    needs: paths-filter
    if: ${{ github.event_name != 'pull_request' || (github.event_name == 'pull_request' && needs.paths-filter.outputs.mltc-pytorch == 'true') }}
    timeout-minutes: 30
    strategy:
      matrix:
        python-version: ["3.8"]
      fail-fast: false

    permissions:
      contents: "read"
      id-token: "write"

    steps:
      - name: checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: set up python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
          cache: "pip"
          cache-dependency-path: "requirements-ci.txt"

      - name: install dependencies
        run: pip install -r requirements-ci.txt

      - name: run notebook
        run: jupyter nbconvert --debug --to notebook --execute examples/multi_label_text_classification/Multi_Label_Text_Classification_using_Pytorch_and_ðŸ”­_Galileo.ipynb

  mltc-pytorch-simple:
    runs-on: ubuntu-latest
    timeout-minutes: 30
    strategy:
      matrix:
        python-version: ["3.8"]
      fail-fast: false

    permissions:
      contents: "read"
      id-token: "write"

    steps:
      - name: checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: set up python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
          cache: "pip"
          cache-dependency-path: "requirements-ci.txt"

      - name: install dependencies
        run: pip install -r requirements-ci.txt

      - name: run notebook
        run: jupyter nbconvert --debug --to notebook --execute examples/multi_label_text_classification/Multi_Label_Text_Classification_using_Pytorch_and_ðŸ”­_Galileo_Simple.ipynb

  mltc-tensorflow:
    runs-on: ubuntu-latest
    needs: paths-filter
    if: ${{ github.event_name != 'pull_request' || (github.event_name == 'pull_request' && needs.paths-filter.outputs.mltc-tensorflow == 'true') }}
    timeout-minutes: 30
    strategy:
      matrix:
        python-version: ["3.8"]
      fail-fast: false

    permissions:
      contents: "read"
      id-token: "write"

    steps:
      - name: checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: set up python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
          cache: "pip"
          cache-dependency-path: "requirements-ci.txt"

      - name: install dependencies
        run: pip install -r requirements-ci.txt

      - name: run notebook
        run: jupyter nbconvert --to notebook --execute examples/multi_label_text_classification/Multi_Label_Text_Classification_using_TensorFlow_and_ðŸ”­_Galileo.ipynb

  ner-hf-trainer:
    runs-on: ubuntu-latest
    needs: paths-filter
    if: ${{ github.event_name != 'pull_request' || (github.event_name == 'pull_request' && needs.paths-filter.outputs.ner-hf-trainer == 'true') }}
    timeout-minutes: 30
    strategy:
      matrix:
        python-version: ["3.8"]
      fail-fast: false

    permissions:
      contents: "read"
      id-token: "write"

    steps:
      - name: checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: set up python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
          cache: "pip"
          cache-dependency-path: "requirements-ci.txt"

      - name: install dependencies
        run: pip install -r requirements-ci.txt

      - name: run notebook
        run: jupyter nbconvert --to notebook --execute examples/named_entity_recognition/Named_Entity_Recognition_with_Huggingface_Trainer_and_ðŸ”­_Galileo.ipynb

  ner-pytorch:
    runs-on: ubuntu-latest
    needs: paths-filter
    if: ${{ github.event_name != 'pull_request' || (github.event_name == 'pull_request' && needs.paths-filter.outputs.ner-pytorch == 'true') }}
    timeout-minutes: 30
    strategy:
      matrix:
        python-version: ["3.8"]
      fail-fast: false

    permissions:
      contents: "read"
      id-token: "write"

    steps:
      - name: checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: set up python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
          cache: "pip"
          cache-dependency-path: "requirements-ci.txt"

      - name: install dependencies
        run: pip install -r requirements-ci.txt

      - name: run notebook
        run: jupyter nbconvert --to notebook --execute examples/named_entity_recognition/Named_Entity_Recognition_with_Pytorch_and_ðŸ”­_Galileo.ipynb

  ner-pytorch-simple:
    runs-on: ubuntu-latest
    timeout-minutes: 30
    strategy:
      matrix:
        python-version: ["3.8"]
      fail-fast: false

    permissions:
      contents: "read"
      id-token: "write"

    steps:
      - name: checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: set up python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
          cache: "pip"
          cache-dependency-path: "requirements-ci.txt"

      - name: install dependencies
        run: pip install -r requirements-ci.txt

      - name: run notebook
        run: jupyter nbconvert --to notebook --execute examples/named_entity_recognition/Named_Entity_Recognition_with_Pytorch_and_ðŸ”­_Galileo_Simple.ipynb

  ner-spacy:
    runs-on: ubuntu-latest
    needs: paths-filter
    # if: ${{ github.event_name != 'pull_request' || (github.event_name == 'pull_request' && needs.paths-filter.outputs.ner-spacy == 'true') }}
    timeout-minutes: 30
    strategy:
      matrix:
        python-version: ["3.8"]
      fail-fast: false

    permissions:
      contents: "read"
      id-token: "write"

    steps:
      - name: checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: set up python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
          cache: "pip"
          cache-dependency-path: "requirements-ci.txt"

      - name: install dependencies
        run: pip install -r requirements-ci.txt

      - name: run notebook
        run: jupyter nbconvert --to notebook --execute examples/named_entity_recognition/Named_Entity_Recognition_with_SpaCy_and_ðŸ”­_Galileo.ipynb

  ner-spacy-inf:
    runs-on: ubuntu-latest
    needs: paths-filter
    # if: ${{ github.event_name != 'pull_request' || (github.event_name == 'pull_request' && needs.paths-filter.outputs.ner-spacy-inf == 'true') }}
    timeout-minutes: 30
    strategy:
      matrix:
        python-version: ["3.8"]
      fail-fast: false

    permissions:
      contents: "read"
      id-token: "write"

    steps:
      - name: checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: set up python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
          cache: "pip"
          cache-dependency-path: "requirements-ci.txt"

      - name: install dependencies
        run: pip install -r requirements-ci.txt

      - name: install pre-trained language model
        run: python -m spacy download en_core_web_sm

      - name: run notebook
        run: jupyter nbconvert --to notebook --execute examples/named_entity_recognition/Named_Entity_Recognition_Inference_with_SpaCy_and_ðŸ”­_Galileo.ipynb

  ner-tensorflow:
    runs-on: ubuntu-latest
    needs: paths-filter
    if: ${{ github.event_name != 'pull_request' || (github.event_name == 'pull_request' && needs.paths-filter.outputs.ner-tensorflow == 'true') }}
    strategy:
      matrix:
        python-version: ["3.8"]
      fail-fast: false

    permissions:
      contents: "read"
      id-token: "write"

    steps:
      - name: checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: set up python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
          cache: "pip"
          cache-dependency-path: "requirements-ci.txt"

      - name: install dependencies
        run: pip install -r requirements-ci.txt

      - name: run notebook
        run: jupyter nbconvert --to notebook --execute examples/named_entity_recognition/Named_Entity_Recognition_with_Tensorflow_and_ðŸ”­_Galileo.ipynb

  # NOTE: these tests are disabled as they are non-trivial to fix and nli is not a priority for us at the moment
  # NOTE: we will re-enable these tests when we have more bandwidth to fix them and there's more customer feedback
  # nli-pytorch:
  #   runs-on: ubuntu-latest
  #   needs: paths-filter
  #   if: ${{ github.event_name != 'pull_request' || (github.event_name == 'pull_request' && needs.paths-filter.outputs.nli-pytorch == 'true') }}
  #   timeout-minutes: 30
  #   strategy:
  #     matrix:
  #       python-version: ["3.8"]
  #     fail-fast: false

  #   permissions:
  #     contents: "read"
  #     id-token: "write"

  #   steps:
  #     - name: checkout
  #       uses: actions/checkout@v3
  #       with:
  #         fetch-depth: 0

  #     - name: set up python
  #       uses: actions/setup-python@v4
  #       with:
  #         python-version: ${{ matrix.python-version }}
  #         cache: "pip"
  #         cache-dependency-path: "requirements-ci.txt"

  #     - name: install dependencies
  #       run: pip install -r requirements-ci.txt

  #     - name: run notebook
  #       run: jupyter nbconvert --to notebook --execute examples/natural_language_inference/Natural_Language_Inference_using_Pytorch_and_ðŸ”­_Galileo.ipynb

  # nli-pytorch-simple:
  #   runs-on: ubuntu-latest
  #   timeout-minutes: 30
  #   strategy:
  #     matrix:
  #       python-version: ["3.8"]
  #     fail-fast: false

  #   permissions:
  #     contents: "read"
  #     id-token: "write"

  #   steps:
  #     - name: checkout
  #       uses: actions/checkout@v3
  #       with:
  #         fetch-depth: 0

  #     - name: set up python
  #       uses: actions/setup-python@v4
  #       with:
  #         python-version: ${{ matrix.python-version }}
  #         cache: "pip"
  #         cache-dependency-path: "requirements-ci.txt"

  #     - name: install dependencies
  #       run: pip install -r requirements-ci.txt

  #     - name: run notebook
  #       run: jupyter nbconvert --to notebook --execute examples/natural_language_inference/Natural_Language_Inference_using_Pytorch_and_ðŸ”­_Galileo_Simple.ipynb

  # nli-tensorflow:
  #   runs-on: ubuntu-latest
  #   needs: paths-filter
  #   if: ${{ github.event_name != 'pull_request' || (github.event_name == 'pull_request' && needs.paths-filter.outputs.nli-tensorflow == 'true') }}
  #   timeout-minutes: 30
  #   strategy:
  #     matrix:
  #       python-version: ["3.8"]
  #     fail-fast: false

  #   permissions:
  #     contents: "read"
  #     id-token: "write"

  #   steps:
  #     - name: checkout
  #       uses: actions/checkout@v3
  #       with:
  #         fetch-depth: 0

  #     - name: set up python
  #       uses: actions/setup-python@v4
  #       with:
  #         python-version: ${{ matrix.python-version }}
  #         cache: "pip"
  #         cache-dependency-path: "requirements-ci.txt"

  #     - name: install dependencies
  #       run: pip install -r requirements-ci.txt

  #     - name: run notebook
  #       run: jupyter nbconvert --to notebook --execute examples/natural_language_inference/Natural_Language_Inference_using_TensorFlow_and_ðŸ”­_Galileo.ipynb

  tc-hf-trainer:
    runs-on: ubuntu-latest
    needs: paths-filter
    if: ${{ github.event_name != 'pull_request' || (github.event_name == 'pull_request' && needs.paths-filter.outputs.tc-hf-trainer == 'true') }}
    timeout-minutes: 30
    strategy:
      matrix:
        python-version: ["3.8"]
      fail-fast: false

    permissions:
      contents: "read"
      id-token: "write"

    steps:
      - name: checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: set up python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
          cache: "pip"
          cache-dependency-path: "requirements-ci.txt"

      - name: install dependencies
        run: pip install -r requirements-ci.txt

      - name: run notebook
        run: jupyter nbconvert --to notebook --execute examples/text_classification/Text_Classification_using_Huggingface_Trainer_and_ðŸ”­_Galileo.ipynb

  tc-keras:
    runs-on: ubuntu-latest
    needs: paths-filter
    if: ${{ github.event_name != 'pull_request' || (github.event_name == 'pull_request' && needs.paths-filter.outputs.tc-keras == 'true') }}
    timeout-minutes: 30
    strategy:
      matrix:
        python-version: ["3.8"]
      fail-fast: false

    permissions:
      contents: "read"
      id-token: "write"

    steps:
      - name: checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: set up python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
          cache: "pip"
          cache-dependency-path: "requirements-ci.txt"

      - name: install dependencies
        run: pip install -r requirements-ci.txt

      - name: run notebook
        run: jupyter nbconvert --to notebook --execute examples/text_classification/Text_Classification_using_Keras_and_ðŸ”­_Galileo.ipynb

  tc-pytorch:
    runs-on: ubuntu-latest
    needs: paths-filter
    if: ${{ github.event_name != 'pull_request' || (github.event_name == 'pull_request' && needs.paths-filter.outputs.tc-pytorch == 'true') }}
    timeout-minutes: 30
    strategy:
      matrix:
        python-version: ["3.8"]
      fail-fast: false

    permissions:
      contents: "read"
      id-token: "write"

    steps:
      - name: checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: set up python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
          cache: "pip"
          cache-dependency-path: "requirements-ci.txt"

      - name: install dependencies
        run: pip install -r requirements-ci.txt

      - name: run notebook
        run: jupyter nbconvert --to notebook --execute examples/text_classification/Text_Classification_using_PyTorch_and_ðŸ”­_Galileo.ipynb

  tc-pytorch-simple:
    runs-on: ubuntu-latest
    timeout-minutes: 30
    strategy:
      matrix:
        python-version: ["3.8"]
      fail-fast: false

    permissions:
      contents: "read"
      id-token: "write"

    steps:
      - name: checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: set up python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
          cache: "pip"
          cache-dependency-path: "requirements-ci.txt"

      - name: install dependencies
        run: pip install -r requirements-ci.txt

      - name: run notebook
        run: jupyter nbconvert --to notebook --execute examples/text_classification/Text_Classification_using_PyTorch_and_ðŸ”­_Galileo_Simple.ipynb

  tc-tensorflow:
    runs-on: ubuntu-latest
    needs: paths-filter
    if: ${{ github.event_name != 'pull_request' || (github.event_name == 'pull_request' && needs.paths-filter.outputs.tc-tensorflow == 'true') }}
    timeout-minutes: 30
    strategy:
      matrix:
        python-version: ["3.8"]
      fail-fast: false

    permissions:
      contents: "read"
      id-token: "write"

    steps:
      - name: checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: set up python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
          cache: "pip"
          cache-dependency-path: "requirements-ci.txt"

      - name: install dependencies
        run: pip install -r requirements-ci.txt

      - name: run notebook
        run: jupyter nbconvert --to notebook --execute examples/text_classification/Text_Classification_using_Tensorflow_and_ðŸ”­_Galileo.ipynb

  ic-pytorch:
    runs-on: ubuntu-latest
    needs: paths-filter
    if: ${{ github.event_name != 'pull_request' || (github.event_name == 'pull_request' && needs.paths-filter.outputs.ic-pytorch == 'true' ) }}
    strategy:
      matrix:
        python-version: ["3.9"]
      fail-fast: false

    permissions:
      contents: "read"
      id-token: "write"

    steps:
      - name: checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: set up python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
          cache: "pip"
          cache-dependency-path: "requirements-ci.txt"

      - name: install dependencies
        run: pip install -r requirements-ci.txt

      - name: run notebook
        run: jupyter nbconvert --debug --to notebook --execute examples/image_classification/Image_Classification_using_PyTorch_and_ðŸ”­_Galileo.ipynb

  od-ultralytics:
    runs-on: ubuntu-latest
    needs: paths-filter
    if: ${{ github.event_name != 'pull_request' || (github.event_name == 'pull_request' && needs.paths-filter.outputs.od-ultralytics == 'true' ) }}
    strategy:
      matrix:
        python-version: ["3.9"]
      fail-fast: false

    permissions:
      contents: "read"
      id-token: "write"

    steps:
      - name: checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: set up python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
          cache: "pip"
          cache-dependency-path: "requirements-ci.txt"

      - name: install dependencies
        run: pip install -r requirements-ci.txt

      - name: run notebook
        run: jupyter nbconvert --debug --to notebook --execute examples/object_detection/Object_Detection_using_Ultralytics_and_ðŸ”­_Galileo.ipynb

  semantic-segmentation-pytorch:
    runs-on: ubuntu-latest
    needs: paths-filter
    if: ${{ github.event_name != 'pull_request' || (github.event_name == 'pull_request' && needs.paths-filter.outputs.semantic-segmentation-pytorch == 'true' ) }}
    strategy:
      matrix:
        python-version: ["3.9"]
      fail-fast: false

    permissions:
      contents: "read"
      id-token: "write"

    steps:
      - name: checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: set up python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
          cache: "pip"
          cache-dependency-path: "requirements-ci.txt"

      - name: install dependencies
        run: pip install -r requirements-ci.txt

      - name: run notebook
        run: jupyter nbconvert --debug --to notebook --execute examples/semantic_segmentation/Semantic_Segmentation_Using_ðŸ”­_Galileo.ipynb

  tc-setfit-transformers:
    runs-on: ubuntu-latest
    needs: paths-filter
    if: ${{ github.event_name != 'pull_request' || (github.event_name == 'pull_request' && needs.paths-filter.outputs.tc-setfit-transformers == 'true' ) }}
    strategy:
      matrix:
        python-version: ["3.9"]
      fail-fast: false

    permissions:
      contents: "read"
      id-token: "write"

    steps:
      - name: checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: set up python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
          cache: "pip"
          cache-dependency-path: "requirements-ci.txt"

      - name: install dependencies
        run: pip install -r requirements-ci.txt

      - name: convert data
        run: python scripts/demo_datasets_regex.py

      - name: run notebook
        run: jupyter nbconvert --debug --to notebook --execute examples/text_classification/Text_Classification_using_SetFit_and_ðŸ”­_Galileo.ipynb

  send-slack-notification:
    runs-on: ubuntu-latest
    if: github.event_name != 'pull_request'
    needs:
      [
        mltc-pytorch,
        mltc-tensorflow,
        ner-hf-trainer,
        ner-pytorch,
        ner-spacy,
        ner-spacy-inf,
        ner-tensorflow,
        tc-hf-trainer,
        tc-keras,
        tc-pytorch,
        tc-tensorflow,
        ic-pytorch,
        od-ultralytics,
      ]
    permissions:
      contents: "read"
      id-token: "write"

    steps:
      - name: checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: construct footer url
        id: footer_url
        run: |
          SLACK_FOOTER_URL="${GITHUB_SERVER_URL}/${GITHUB_REPOSITORY}/actions/runs/${GITHUB_RUN_ID}"
          echo "slack_footer_url=${SLACK_FOOTER_URL}" >> $GITHUB_OUTPUT

      - name: report status to slack
        if: always()
        uses: rtCamp/action-slack-notify@v2
        env:
          SLACK_WEBHOOK: ${{ secrets.ML_TEAM_EXAMPLES_WEBHOOK }}
          SLACK_USERNAME: "Examples Repo CI"
          SLACK_ICON_EMOJI: ":telescope:"
          SLACK_COLOR: ${{ ((needs.ic-pytorch.result == 'success') && (needs.mltc-pytorch.result == 'success') && (needs.mltc-tensorflow.result == 'success') && (needs.ner-hf-trainer.result == 'success') && (needs.ner-pytorch.result == 'success') && (needs.ner-spacy.result == 'success') && (needs.ner-spacy-inf.result == 'success') && (needs.ner-tensorflow.result == 'success') && (needs.tc-hf-trainer.result == 'success') && (needs.tc-keras.result == 'success') && (needs.tc-pytorch.result == 'success') && (needs.tc-tensorflow.result == 'success') && (needs.od-ultralytics.result == 'success') && 'success') || 'failure' }}
          SLACK_TITLE: "Examples Repo CI"
          SLACK_MESSAGE: "Click the link in the footer to investigate any broken example notebooks."
          SLACK_FOOTER: ${{ steps.footer_url.outputs.slack_footer_url }}
